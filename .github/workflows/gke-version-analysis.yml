name: GKE Version Change Analysis

on:
  pull_request:
    paths:
      - 'gke-version.yaml'
    types: [opened, synchronize]
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  detect-version-change:
    runs-on: ubuntu-latest
    outputs:
      old_controlplane_version: ${{ steps.detect.outputs.old_controlplane_version }}
      new_controlplane_version: ${{ steps.detect.outputs.new_controlplane_version }}
      old_nodes_version: ${{ steps.detect.outputs.old_nodes_version }}
      new_nodes_version: ${{ steps.detect.outputs.new_nodes_version }}
      has_changes: ${{ steps.detect.outputs.has_changes }}

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect version changes
        id: detect
        run: |
          # Get the base branch
          git fetch origin ${{ github.base_ref }}

          # Extract versions from current branch
          NEW_CP=$(grep -A 1 "controlplane:" gke-version.yaml | grep "version:" | awk '{print $2}')
          NEW_NODES=$(grep -A 1 "nodes:" gke-version.yaml | grep "version:" | awk '{print $2}')

          # Extract versions from base branch
          git checkout origin/${{ github.base_ref }} -- gke-version.yaml 2>/dev/null || true

          if [ -f gke-version.yaml ]; then
            OLD_CP=$(grep -A 1 "controlplane:" gke-version.yaml | grep "version:" | awk '{print $2}')
            OLD_NODES=$(grep -A 1 "nodes:" gke-version.yaml | grep "version:" | awk '{print $2}')
          else
            OLD_CP="none"
            OLD_NODES="none"
          fi

          # Restore current branch version
          git checkout HEAD -- gke-version.yaml

          echo "old_controlplane_version=$OLD_CP" >> $GITHUB_OUTPUT
          echo "new_controlplane_version=$NEW_CP" >> $GITHUB_OUTPUT
          echo "old_nodes_version=$OLD_NODES" >> $GITHUB_OUTPUT
          echo "new_nodes_version=$NEW_NODES" >> $GITHUB_OUTPUT

          if [ "$OLD_CP" != "$NEW_CP" ] || [ "$OLD_NODES" != "$NEW_NODES" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

          echo "Version changes detected:"
          echo "Controlplane: $OLD_CP -> $NEW_CP"
          echo "Nodes: $OLD_NODES -> $NEW_NODES"

  fetch-release-notes:
    needs: detect-version-change
    if: needs.detect-version-change.outputs.has_changes == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract Kubernetes versions
        id: k8s_versions
        run: |
          OLD_VERSION="${{ needs.detect-version-change.outputs.old_controlplane_version }}"
          NEW_VERSION="${{ needs.detect-version-change.outputs.new_controlplane_version }}"

          # Extract K8s version (e.g., 1.32.8-gke.1134000 -> 1.32)
          OLD_K8S=$(echo $OLD_VERSION | cut -d. -f1,2)
          NEW_K8S=$(echo $NEW_VERSION | cut -d. -f1,2)

          echo "old_k8s=$OLD_K8S" >> $GITHUB_OUTPUT
          echo "new_k8s=$NEW_K8S" >> $GITHUB_OUTPUT

      - name: Download Kubernetes Release Notes
        run: |
          OLD_K8S="${{ steps.k8s_versions.outputs.old_k8s }}"
          NEW_K8S="${{ steps.k8s_versions.outputs.new_k8s }}"

          mkdir -p release-notes

          # Download new version release notes
          echo "Fetching Kubernetes $NEW_K8S release notes..."
          curl -sL "https://raw.githubusercontent.com/kubernetes/kubernetes/master/CHANGELOG/CHANGELOG-${NEW_K8S}.md" \
            -o release-notes/k8s-${NEW_K8S}.md || echo "Failed to fetch K8s $NEW_K8S"

          # Download old version if different
          if [ "$OLD_K8S" != "$NEW_K8S" ] && [ "$OLD_K8S" != "none" ]; then
            echo "Fetching Kubernetes $OLD_K8S release notes..."
            curl -sL "https://raw.githubusercontent.com/kubernetes/kubernetes/master/CHANGELOG/CHANGELOG-${OLD_K8S}.md" \
              -o release-notes/k8s-${OLD_K8S}.md || echo "Failed to fetch K8s $OLD_K8S"
          fi

      - name: Create context file for Claude
        run: |
          cat > release-notes/analysis-context.md << 'EOF'
          # GKE Version Upgrade Context

          ## Version Changes
          - **Old Controlplane Version**: ${{ needs.detect-version-change.outputs.old_controlplane_version }}
          - **New Controlplane Version**: ${{ needs.detect-version-change.outputs.new_controlplane_version }}
          - **Old Nodes Version**: ${{ needs.detect-version-change.outputs.old_nodes_version }}
          - **New Nodes Version**: ${{ needs.detect-version-change.outputs.new_nodes_version }}

          ## Project Information
          - **Cluster Name**: test-tokyo-cluster
          - **Environment**: dev
          - **Location**: asia-northeast1
          - **Platform**: Google Kubernetes Engine (GKE)

          ## Analysis Request

          上記のバージョン変更について、以下の観点で詳細な分析を実施してください：

          ### 1. バージョン変更サマリー
          - メジャー/マイナー/パッチレベルの変更を明確に
          - アップグレードパスの妥当性

          ### 2. 🚨 Breaking Changes（破壊的変更）
          - API変更（削除、動作変更、デフォルト値変更）
          - 互換性に影響する変更
          - 必須の対応事項

          ### 3. ⚠️ Deprecations（非推奨化）
          - 非推奨となったAPI/機能
          - 削除予定時期
          - 代替手段

          ### 4. 🔒 Security Updates（セキュリティ）
          - CVE修正
          - セキュリティパッチ
          - 脆弱性対応

          ### 5. ✨ New Features & Improvements
          - 新機能
          - パフォーマンス改善
          - 安定性向上

          ### 6. 🎯 Impact on This Project
          このGKEクラスタへ���具体的な影響を分析してください：
          - 影響度（Critical/High/Medium/Low）
          - 必要なアクション
          - テスト項目
          - ロールバック計画の必要性

          ### 7. 📋 Action Items
          以下の形式でチェックリストを作成してください：
          - [ ] 実施すべきアクション
          - [ ] 検証項目
          - [ ] ドキュメント更新

          ### 8. 📚 References
          関連するドキュメントへのリンク

          ## Output Format

          Markdown形式で、上記の構造に従って分析結果を出力してください。
          技術的に正確で、actionableな情報を提供することを重視してください。
          EOF

      - name: Upload release notes artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release-notes/
          retention-days: 30

  analyze-with-claude:
    needs: [detect-version-change, fetch-release-notes]
    if: needs.detect-version-change.outputs.has_changes == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download release notes
        uses: actions/download-artifact@v4
        with:
          name: release-notes
          path: release-notes/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Claude Code CLI
        run: |
          npm install -g @anthropic-ai/claude-code

      - name: Create analysis prompt
        run: |
          cat > analysis-prompt.txt << 'PROMPT_EOF'
          あなたはKubernetesとGKEの専門家です。

          このリポジトリで以下のGKEバージョン変更が行われようとしています：
          - Old Version: ${{ needs.detect-version-change.outputs.old_controlplane_version }}
          - New Version: ${{ needs.detect-version-change.outputs.new_controlplane_version }}

          release-notes/ ディレクトリには以下のファイルがあります：
          - analysis-context.md: バージョン変更のコンテキスト情報
          - k8s-*.md: Kubernetesの公式リリースノート

          これらのファイルを読み込んで分析し、以下の構造でMarkdown形式の影響分析レポートを作成してください：

          # GKE Version Upgrade Analysis

          ## 📊 Version Change Summary
          - バージョン変更の概要
          - Change Level（Major/Minor/Patch）を判定

          ## 🚨 Breaking Changes
          - 破壊的変更のリスト
          - 対応が必要な項目

          ## ⚠️ Deprecations
          - 非推奨化された機能
          - 移行期限と代替手段

          ## 🔒 Security Updates
          - セキュリティ修正
          - CVE情報

          ## ✨ New Features & Improvements
          - 新機能
          - 改善点

          ## 🎯 Impact on This Project
          - このGKEクラスタへの影響度（Critical/High/Medium/Low）
          - 必要なアクション
          - テスト項目

          ## 📋 Action Items
          実行すべきアクションのチェックリスト：
          - [ ] アクション1
          - [ ] アクション2

          ## 🧪 Testing Checklist
          検証項目のチェックリスト：
          - [ ] テスト項目1
          - [ ] テスト項目2

          ## 📚 References
          - 関連ドキュメントへのリンク

          **重要**: リリースノートに基づいた事実のみを記載してください。推測は避けてください。
          PROMPT_EOF

      - name: Run Claude analysis (headless mode)
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          echo "Starting Claude Code analysis in headless mode..."
          claude -p "$(cat analysis-prompt.txt)" > analysis-report.md || {
            echo "# Analysis Failed" > analysis-report.md
            echo "Claude Code analysis failed. Please check the logs." >> analysis-report.md
            exit 1
          }

      - name: Post analysis to PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            const analysis = fs.readFileSync('analysis-report.md', 'utf8');

            const commentBody = `## 🔄 GKE Version Upgrade Analysis

            **Version Change**: \`${{ needs.detect-version-change.outputs.old_controlplane_version }}\` → \`${{ needs.detect-version-change.outputs.new_controlplane_version }}\`

            ---

            ${analysis}

            ---

            <sub>🤖 Analyzed by Claude Code (Headless Mode) | [Download Full Report](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})</sub>
            `;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });

      - name: Upload analysis report artifact
        uses: actions/upload-artifact@v4
        with:
          name: gke-analysis-report
          path: analysis-report.md
          retention-days: 30

  # validate-version:
  #   needs: detect-version-change
  #   if: needs.detect-version-change.outputs.has_changes == 'true'
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Setup gcloud CLI
  #       uses: google-github-actions/setup-gcloud@v2

  #     - name: Validate GKE version availability
  #       run: |
  #         chmod +x ./check-gke-version.sh

  #         if ./check-gke-version.sh; then
  #           echo "✅ All versions are valid and available in GKE"
  #         else
  #           echo "❌ Version validation failed"
  #           echo "Please check the GKE release notes and update to a valid version"
  #           exit 1
  #         fi
