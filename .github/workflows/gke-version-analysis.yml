name: GKE Version Change Analysis

on:
  pull_request:
    paths:
      - 'gke-version.yaml'
    types: [opened, synchronize]
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  detect-version-change:
    runs-on: ubuntu-latest
    outputs:
      old_controlplane_version: ${{ steps.detect.outputs.old_controlplane_version }}
      new_controlplane_version: ${{ steps.detect.outputs.new_controlplane_version }}
      old_nodes_version: ${{ steps.detect.outputs.old_nodes_version }}
      new_nodes_version: ${{ steps.detect.outputs.new_nodes_version }}
      has_changes: ${{ steps.detect.outputs.has_changes }}

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup yq
        uses: mikefarah/yq@master

      - name: Detect version changes
        id: detect
        run: |
          # Get the base branch
          git fetch origin ${{ github.base_ref }}

          # Extract versions from current branch using yq
          NEW_CP=$(yq eval '.controlplane.version' gke-version.yaml)
          NEW_NODES=$(yq eval '.nodes.version' gke-version.yaml)

          # Extract versions from base branch
          git checkout origin/${{ github.base_ref }} -- gke-version.yaml 2>/dev/null || true

          if [ -f gke-version.yaml ]; then
            OLD_CP=$(yq eval '.controlplane.version' gke-version.yaml)
            OLD_NODES=$(yq eval '.nodes.version' gke-version.yaml)
          else
            OLD_CP="none"
            OLD_NODES="none"
          fi

          # Restore current branch version
          git checkout HEAD -- gke-version.yaml

          echo "old_controlplane_version=$OLD_CP" >> $GITHUB_OUTPUT
          echo "new_controlplane_version=$NEW_CP" >> $GITHUB_OUTPUT
          echo "old_nodes_version=$OLD_NODES" >> $GITHUB_OUTPUT
          echo "new_nodes_version=$NEW_NODES" >> $GITHUB_OUTPUT

          if [ "$OLD_CP" != "$NEW_CP" ] || [ "$OLD_NODES" != "$NEW_NODES" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

          echo "Version changes detected:"
          echo "Controlplane: $OLD_CP -> $NEW_CP"
          echo "Nodes: $OLD_NODES -> $NEW_NODES"

  fetch-release-notes:
    needs: detect-version-change
    if: needs.detect-version-change.outputs.has_changes == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract Kubernetes versions
        id: k8s_versions
        run: |
          OLD_VERSION="${{ needs.detect-version-change.outputs.old_controlplane_version }}"
          NEW_VERSION="${{ needs.detect-version-change.outputs.new_controlplane_version }}"

          # Extract K8s version (e.g., 1.32.8-gke.1134000 -> 1.32)
          OLD_K8S=$(echo $OLD_VERSION | cut -d. -f1,2)
          NEW_K8S=$(echo $NEW_VERSION | cut -d. -f1,2)

          echo "old_k8s=$OLD_K8S" >> $GITHUB_OUTPUT
          echo "new_k8s=$NEW_K8S" >> $GITHUB_OUTPUT

      - name: Download Kubernetes Release Notes
        run: |
          OLD_K8S="${{ steps.k8s_versions.outputs.old_k8s }}"
          NEW_K8S="${{ steps.k8s_versions.outputs.new_k8s }}"

          mkdir -p release-notes

          # Download new version release notes
          echo "Fetching Kubernetes $NEW_K8S release notes..."
          curl -sL "https://raw.githubusercontent.com/kubernetes/kubernetes/master/CHANGELOG/CHANGELOG-${NEW_K8S}.md" \
            -o release-notes/k8s-${NEW_K8S}.md || echo "Failed to fetch K8s $NEW_K8S"

      - name: Upload release notes artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release-notes/
          retention-days: 30

  check-deprecated-apis:
    needs: detect-version-change
    if: needs.detect-version-change.outputs.has_changes == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract target Kubernetes version
        id: target_version
        run: |
          NEW_VERSION="${{ needs.detect-version-change.outputs.new_controlplane_version }}"
          # Extract K8s version (e.g., 1.32.8-gke.1134000 -> v1.32)
          TARGET_K8S="v$(echo $NEW_VERSION | cut -d. -f1,2)"
          echo "target_k8s=$TARGET_K8S" >> $GITHUB_OUTPUT
          echo "Target Kubernetes version: $TARGET_K8S"

      - name: Install Pluto
        run: |
          VERSION=$(curl -s https://api.github.com/repos/FairwindsOps/pluto/releases/latest | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
          curl -Lo pluto.tar.gz "https://github.com/FairwindsOps/pluto/releases/download/v${VERSION}/pluto_${VERSION}_linux_amd64.tar.gz"
          tar xzf pluto.tar.gz
          chmod +x pluto
          sudo mv pluto /usr/local/bin/
          rm pluto.tar.gz
          echo "✅ Pluto version $(pluto version) installed"

      - name: Scan for deprecated APIs
        id: pluto_scan
        run: |
          echo "Scanning repository for deprecated Kubernetes APIs..."
          echo ""

          # Run Pluto and save output
          pluto detect-files -d . --target-versions k8s=${{ steps.target_version.outputs.target_k8s }} -o wide > pluto-report.txt || true

          # Display results
          cat pluto-report.txt

          # Check if deprecated APIs were found
          if grep -q "API VERSIONS" pluto-report.txt; then
            echo "deprecated_found=true" >> $GITHUB_OUTPUT
          else
            echo "deprecated_found=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Pluto report artifact
        run: |
          cat > pluto-report.md << 'EOF'
          # Deprecated API Detection Report

          Target Kubernetes Version: `${{ steps.target_version.outputs.target_k8s }}`

          ## Scan Results

          ```
          EOF
          cat pluto-report.txt >> pluto-report.md
          echo '```' >> pluto-report.md

      - name: Upload Pluto report
        uses: actions/upload-artifact@v4
        with:
          name: pluto-report
          path: pluto-report.md
          retention-days: 30

      - name: Post Pluto report to PR
        if: github.event_name == 'pull_request'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO: ${{ github.repository }}
          DEPRECATED_FOUND: ${{ steps.pluto_scan.outputs.deprecated_found }}
        run: |
          # Create comment body
          if [ "$DEPRECATED_FOUND" = "true" ]; then
            cat > pluto-comment.md << 'COMMENT_EOF'
          ## ⚠️ Deprecated API Detection Report

          **Target Version**: `${{ steps.target_version.outputs.target_k8s }}`

          Pluto detected deprecated Kubernetes APIs in your manifests:

          ```
          COMMENT_EOF
            cat pluto-report.txt >> pluto-comment.md
            cat >> pluto-comment.md << 'COMMENT_EOF'
          ```

          **Action Required**: Please update the affected manifests before upgrading.

          ---

          <sub>🔍 Scanned by [Pluto](https://github.com/FairwindsOps/pluto) | [Download Full Report](https://github.com/${REPO}/actions/runs/${{ github.run_id }})</sub>
          COMMENT_EOF
          else
            cat > pluto-comment.md << 'COMMENT_EOF'
          ## ✅ Deprecated API Detection Report

          **Target Version**: `${{ steps.target_version.outputs.target_k8s }}`

          No deprecated Kubernetes APIs detected in your manifests.

          ---

          <sub>🔍 Scanned by [Pluto](https://github.com/FairwindsOps/pluto) | [Download Full Report](https://github.com/${REPO}/actions/runs/${{ github.run_id }})</sub>
          COMMENT_EOF
          fi

      - name: Post Pluto comment
        uses: ./.github/actions/post-pr-comment
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          pr-number: ${{ github.event.pull_request.number }}
          comment-file: pluto-comment.md
          identifier: 'Deprecated API Detection Report'

  analyze-with-claude:
    needs: [detect-version-change, fetch-release-notes]
    if: needs.detect-version-change.outputs.has_changes == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download release notes
        uses: actions/download-artifact@v4
        with:
          name: release-notes
          path: release-notes/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Claude Code CLI
        run: |
          npm install -g @anthropic-ai/claude-code

      - name: Create analysis prompt
        run: |
          cat > analysis-prompt.txt << 'PROMPT_EOF'
          あなたはKubernetesとGKEの専門家です。

          release-notes/ ディレクトリには以下のファイルがあります：
          - analysis-context.md: バージョン変更のコンテキスト情報
          - k8s-*.md: Kubernetesの公式リリースノート

          これらのファイルとmanifestsを読み込んで分析し、以下の構造を守ってレポートを回答してください。

          **重要**: 各セクションで情報を記載する際は、必ずその情報の参照元となるリリースノートのリンクを含めてください。
          - Kubernetesのリリースノートの場合: `https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG-X.YY.md#vXYYZ` の形式
          - セクションへのリンク: 可能な限り具体的なセクション（例: `#urgent-upgrade-notes`, `#changelog-since-vXXX`）へのアンカーリンクを使用

          ---

          # GKE Version Upgrade Analysis

          ## 📊 Version Change Summary

          バージョン変更の概要を記載：
          - 変更レベル: Major/Minor/Patch
          - 変更範囲: Kubernetes 1.X → 1.Y
          - アップグレードパス: 直接アップグレード可能 or 段階的アップグレード必要

          **参照**: [Kubernetes X.YY Release Notes](リリースノートのURL)

          ---

          ## 🚨 URGENT UPGRADE NOTES

          **最優先事項**: リリースノートの "Urgent Upgrade Notes" セクションを確認し、以下を記載してください：

          - 即座に対応が必要な変更
          - クラスタの動作に影響する重大な変更
          - データ損失や可用性に影響する問題

          **記載形式**:
          ```
          ### [タイトル]
          - **影響**: どのような影響があるか
          - **対応**: 何をすべきか
          - **期限**: いつまでに対応すべきか
          - **参照**: [リリースノートへのリンク](URL)
          ```

          もし該当項目がない場合は "該当なし" と明記してください。

          ---

          ## 🔒 Security Updates

          セキュリティ関連の変更を記載：

          ### CVE修正

          - **CVE-YYYY-XXXXX**: 概要と影響
            - 修正内容
            - 推奨アクション
            - **参照**: [リリースノートへのリンク](URL)

          ### セキュリティ強化

          - 追加されたセキュリティ機能
          - デフォルト設定の変更
          - **参照**: [リリースノートへのリンク](URL)

          ---

          ## 💥 Breaking Changes

          破壊的変更を以下の形式で記載：

          ### [変更内容]

          - **変更点**: 何が変わったか
          - **影響範囲**: どのコンポーネントに影響するか
          - **移行方法**: どう対応すべき��
          - **影響度**: Critical/High/Medium/Low
          - **参照**: [リリースノートへのリンク](URL)

          ---

          ## ✨ New Features & Improvements

          新機能と改善点：

          ### 主要な新機能

          - **機能名**: 説明と活用方法
            - **参照**: [リリースノートへのリンク](URL)

          ### パフォーマンス改善

          - 改善内容と期待される効果
            - **参照**: [リリースノートへのリンク](URL)

          ### 安定性向上

          - 修正されたバグや改善された動作
            - **参照**: [リリースノートへのリンク](URL)

          ---

          ## 📦 Manifest Impact Analysis

          **重要**: リポジトリ内のすべてのKubernetesマニフェストファイルを確認し、バージョンアップの影響を分析してください。

          ### 影響を受けるマニフェスト

          **影響があるマニフェストのみ記載してください**。影響がない場合は「影響なし」とだけ記載してください。

          影響があるマニフェストについて：

          #### [マニフェストファイル名]

          - **使用しているAPIバージョン**: 例) apps/v1, batch/v1
          - **影響内容**: 非推奨API、動作変更、Breaking Changeなど
          - **必要なアクション**: 修正が必要な場合は具体的に記載
          - **優先度**: Critical/High/Medium/Low
          - **参照**: [関連するリリースノートのセクションへのリンク](URL)

          ### 新機能で改善できる可能性

          新機能を活用してパフォーマンスやセキュリティを改善できるマニフェストがあれば記載：
          - マニフェストファイル名
          - 適用できる新機能
          - 期待される効果
          - **参照**: [リリースノートへのリンク](URL)

          ---

          ## 📚 References

          このセクションに、分析で参照したすべてのリリースノートのリンクをまとめて記載してください：

          - [Kubernetes X.YY.Z Release Notes](URL)
          - [Kubernetes X.YY CHANGELOG](URL)
          - その他参照したドキュメント

          ---

          **分析の重要なポイント**:
          1. リリースノートの事実に基づいて記載してください
          2. 推測は避け、不明な点は「要確認」と記載してください
          3. Urgent Upgrade Notes は必ず確認し、存在する場合は詳細に記載してください
          4. リポジトリ内のすべてのマニフェストファイルを確認し、具体的な影響を分析してください
          5. 非推奨APIは具体的なファイル名とAPIバージョンを示してください
          6. actionable な情報を提供することを最優先してください
          7. **すべての情報に参照元のリリースノートリンクを含めてください**（最重要）
          PROMPT_EOF

      - name: Run Claude analysis (headless mode)
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          echo "Starting Claude Code analysis in headless mode..."
          claude -p "$(cat analysis-prompt.txt)" > analysis-report.md || {
            echo "# Analysis Failed" > analysis-report.md
            echo "Claude Code analysis failed. Please check the logs." >> analysis-report.md
            exit 1
          }

      - name: Post analysis to PR
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO: ${{ github.repository }}
        run: |
          # Create comment body
          cat > comment-body.md << 'COMMENT_EOF'
          ## 🔄 GKE Version Upgrade Analysis

          **Version Change**: `${{ needs.detect-version-change.outputs.old_controlplane_version }}` → `${{ needs.detect-version-change.outputs.new_controlplane_version }}`

          ---

          COMMENT_EOF

          # Append analysis
          cat analysis-report.md >> comment-body.md

          # Append footer
          cat >> comment-body.md << COMMENT_EOF

          ---

          <sub>🤖 Analyzed by Claude Code (Headless Mode) | [Download Full Report](https://github.com/${REPO}/actions/runs/${{ github.run_id }})</sub>
          COMMENT_EOF

      - name: Post analysis comment
        uses: ./.github/actions/post-pr-comment
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          pr-number: ${{ github.event.pull_request.number }}
          comment-file: comment-body.md
          identifier: '🔄 GKE Version Upgrade Analysis'

      - name: Upload analysis report artifact
        uses: actions/upload-artifact@v4
        with:
          name: gke-analysis-report
          path: analysis-report.md
          retention-days: 30

  # validate-version:
  #   needs: detect-version-change
  #   if: needs.detect-version-change.outputs.has_changes == 'true'
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Setup gcloud CLI
  #       uses: google-github-actions/setup-gcloud@v2

  #     - name: Validate GKE version availability
  #       run: |
  #         chmod +x ./check-gke-version.sh

  #         if ./check-gke-version.sh; then
  #           echo "✅ All versions are valid and available in GKE"
  #         else
  #           echo "❌ Version validation failed"
  #           echo "Please check the GKE release notes and update to a valid version"
  #           exit 1
  #         fi
